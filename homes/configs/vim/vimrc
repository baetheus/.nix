" Standard Settings
syntax on
set re=0
filetype plugin indent on
colorscheme noctu

set exrc
set nocompatible
set background=dark
set expandtab
set hidden
set mouse=a
set number
set relativenumber
set shiftwidth=2
set tabstop=2
set undofile
set backspace=indent,eol,start
set softtabstop=2
set textwidth=80
set autowrite
set autowriteall
set autoread
set showcmd
set laststatus=2
set showtabline=2
set guioptions-=e
set splitbelow splitright
set backupdir=~/.local/vim/backup//,/tmp//
set directory=~/.local/vim/swp//,/tmp//
set undodir=~/.local/vim/undo//,/tmp//

" Leader mapping
map <Space> <Leader>

" Custom unimpaired mappings
nmap [w <C-W>w
nmap ]w <C-W>W

" Fuzzy file finding
set path=$PWD/**
set wildmenu
set wildignore+=**/.git/**,**/node_modules/**,**/result/**,**/dist/**,**/build/**

" Use ripgrep
if executable("rg")
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
  set grepformat=%f:%l:%c:%m
endif

" Tab through omnifunc
function! Tab()
  if (pumvisible())
    return "\<C-N>"                         " existing text matching
  else
    return "\<Tab>"                         " plugin matching
  endif
endfunction

function! ShiftTab()
  if (pumvisible())
    return "\<C-P>"                         " existing text matching
  else
    return "\<S-Tab>"                         " plugin matching
  endif
endfunction

inoremap <Tab> <c-r>=Tab()<CR>
inoremap <S-Tab> <c-r>=ShiftTab()<CR>

" Ledger settings
let g:ledger_is_hledger = 1

" ALE Settings
let g:ale_fix_on_save = 1 " Run fixers on write
let g:ale_completion_enabled = 1 " Allow autocompletion
let g:ale_completion_autoimport = 1 " Allow autocompletion of imports
let g:ale_set_balloons = 1 " Show hover info in balloon

" ALE deno customization
let g:ale_deno_unstable = 1

" ALE Autocompletion
set omnifunc=ale#completion#OmniFunc

" ALE mappings
nmap gr <Plug>(ale_rename)
nmap gR <Plug>(ale_find_reference)
nmap gd <Plug>(ale_go_to_definition)
nmap gD <Plug>(ale_go_to_type_definition)
nmap <Leader>h <Plug>(ale_hover)
nmap <Leader>j <Plug>(ale_code_action)
nmap <Leader>f <Plug>(ale_fix)
nmap <silent> [d <Plug>(ale_previous_wrap)
nmap <silent> ]d <Plug>(ale_next_wrap)

let is_node = $IS_NODE

if is_node == '1'
  let js_linters = ['eslint', 'tsserver']
  let js_fixers = ['eslint', 'prettier']
else
  let js_linters = ['deno']
  let js_fixers = ['deno']
endif

" ALE linters
let g:ale_linters = {
\  'nix': ['rnix_lsp'],
\  'javascript': js_linters,
\  'javascriptreact': js_linters,
\  'typescript': js_linters,
\  'typescriptreact': js_linters,
\  'rust': ['analyzer'],
\  'json': ['jq'],
\  'go': ['gofmt', 'gopls'],
\  'markdown': ['vale', 'marksman']
\}

" ALE fixers (formatting)
let g:ale_fixers = {
\  '*': ['remove_trailing_lines', 'trim_whitespace'],
\  'nix': ['statix'],
\  'javascript': js_fixers,
\  'javascriptreact': js_fixers,
\  'typescript': js_fixers,
\  'typescriptreact': js_fixers,
\  'rust': ['rustfmt'],
\  'json': ['jq'],
\  'go': ['gofmt', 'goimports'],
\  'markdown': ['deno']
\}
